import os
import random
import blessed
term=blessed.Terminal()

def getLines():
#    //FILE PATH TO CORRECT //
  fh = open("Map.txt", "r")
  lines = fh.readlines()
  return lines

#Initialise  Maplist
def initialiseMapXY():
  MapXY=[]
  map =  getLines()[1].split()
  MapXY.append(int(map[0]))
  MapXY.append(int(map[1]))  
  return MapXY

#Initialise MagicDict
def getMagicDict(): 
   MagicDict = {}
   #Set MagicDict
   for i in range(6 , len(getLines())):
      splitLine =  getLines()[i].split()
      MagicDict[(int(splitLine[0]), int(splitLine[1]))]= int(splitLine[2])
   return MagicDict


def getMagicList():
# Initialise  Magiclist
  MagicList=[]
#Set MagicList
  for i in range(6 , len(getLines())):
      splitLine =  getLines()[i].split()
      MagicList.append((int(splitLine[0]), int(splitLine[1])))
  return MagicList

#Initialise les premier phantomes de debut de partie et sauvegarde la ou les fantomes apparaissent
#Pour chaque joueur dans une cl√© "ghostPopLocation"
def setInitialGhostsAndPopSpot(Players,lines=getLines()):
  ghost1 = lines[3].split()
  ghost2 = lines[4].split()
  Players[1]["ghosts"][(int(ghost1[1]), (int(ghost1[2])))] =  10
  Players[1]["ghostPopLocation"]= (int(ghost1[1]),int(ghost1[2]))
  Players[1]["ghostsLocationList"].append((int(ghost1[1]),int(ghost1[2])))
  Players[2]["ghosts"][(int(ghost2[1]), (int(ghost2[2])))] =  10
  Players[2]["ghostPopLocation"]= (int(ghost2[1]),int(ghost2[2]))
  Players[2]["ghostsLocationList"].append((int(ghost2[1]),int(ghost2[2])))
  return Players
# 21,90
#RETURN CORRECT EMOJI
def returnCorrectMagicEmoji(magicValue):
   magicValueDict = {10:'ü•®',30:'üçü',50:'üçú',100:'üåØ',500:'üç∫'}
   return magicValueDict[magicValue]
#RETURN CORRECT EMOJI
def returnCorrectGhostEmoji(PlayerID,case,health):
   healthValueDict = {1:("üòá","üë∫"),2:("üßê","üòà"),3:("üòé","üëø"),4:("XX","üò°"),5:("üòñ","XX"),6:("üí©","ü§¨")}
   if health == 100 :
      emo = healthValueDict[1][PlayerID]
   elif 100 > health and health > 75 :
      emo = healthValueDict[2][PlayerID]
   elif 75 > health and health > 50 :
      emo = healthValueDict[3][PlayerID]
   elif 50 > health and health > 35 :
      emo = healthValueDict[4][PlayerID]
   elif 35 > health and health > 15 :
      emo = healthValueDict[5][PlayerID]
   elif 15 > health and health > 0 :
      emo = healthValueDict[6][PlayerID]
   return emo

#PRINTINITIALY 
def printBoards(MapXY,MagicList,MagicDict,Players):
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #PRINT THE NUMBERS ON THE EDGES
    for x in range(1,MapXY[0]+1):
        if x == 1:
          print(term.move_xy(27,0)+term.on_color_rgb(255,255,255)+term.black+term.underline+term.bold+str(x)+term.normal+term.move_xy(50,50),end=' ',flush=True)
        else:
           if (x%2) == 0 :
             print(term.move_xy(25+(x*2),0)+term.on_color_rgb(0,0,0)+term.white4+term.underline+term.bold+str(x)+term.normal+term.move_xy(50,50),end='',flush=True)
           else :
             print(term.move_xy(25+(x*2),0)+term.on_color_rgb(255,255,255)+term.black+term.underline+term.bold+str(x)+term.normal+term.move_xy(50,50),end='',flush=True)
    for y in range(1,MapXY[1]+1):
        if (y%2) == 0 :
            print(term.move_xy(25+0,y)+term.white+term.underline+term.bold+str(y)+term.normal+term.move_xy(50,50),end='',flush=True)
        else :
            print(term.move_xy(25+0,y)+term.on_color_rgb(255,255,255)+term.black+term.underline+term.bold+str(y)+term.normal+term.move_xy(50,50),end='',flush=True)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #PRINT THE PLAYING BOARD WITH THE MAGICAL SPOTS
    BOARD = [(X,Y)for X in range(1,MapXY[0]+1) for Y in range(1,MapXY[1]+1)]
    for case in BOARD: 
        if ((case[0]+case[1])%2) == 0:
          print(term.move_xy(25+case[0]*2,case[1])+term.on_white+'  '+term.normal+term.move_xy(50,50),end='',flush=True)
        else:
          print(term.move_xy(25+case[0]*2,case[1])+term.on_red3+'  '+term.normal+term.move_xy(50,50),end='',flush=True)
        if  case in MagicList :
          magicValue=MagicDict[case]
          if (case[0]+case[1])%2 == 0 :
            print(term.move_xy(25+case[0]*2,case[1])+term.on_white+returnCorrectMagicEmoji(magicValue)+term.normal+term.move_xy(50,50),end='',flush=True)
          else :
            print(term.move_xy(25+case[0]*2,case[1])+term.on_red3+returnCorrectMagicEmoji(magicValue)+term.normal+term.move_xy(50,50),end='',flush=True)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
    #Print the first ghosts from the dictionnary    
    for player in [1,2]:
       if player == 1 :
         print(term.move_xy(25+Players[player]['ghostPopLocation'][0]*2,Players[player]['ghostPopLocation'][1])+term.on_gold+'üòá'+term.normal+term.move_xy(50,50),end ='',flush=True)
       else :
          print(term.move_xy(25+Players[player]['ghostPopLocation'][0]*2,Players[player]['ghostPopLocation'][1])+term.on_red3+'üë∫'+term.normal+term.move_xy(50,50),end ='',flush=True)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #print P1 table 
    P1Template=[(x,y)for x in range(25) for y in range(21)]
    for case in P1Template:
       print(term.move_xy(case[0],case[1])+term.on_color_rgb(0,0,0)+' '+term.normal+term.move_xy(45,45),end='',flush=True)
    #print P2 table
    P2Template=[(27+MapXY[0]*2+x,y)for x in range(25) for y in range(21)]
    for case in P2Template:

      print(term.move_xy(case[0],case[1])+term.on_color_rgb(0,0,0)+' '+term.normal+term.move_xy(45,45),end='',flush=True)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #print P1  Ressources
    print(term.move_xy(7,0)+term.on_color_rgb(0,0,0)+term.underline+term.white+'PLAYER ONE'+term.normal+term.move_xy(45,45),end='',flush=True)
    print(term.move_xy(0,0)+term.on_color_rgb(0,0,0)+'üè∞üßù'+term.normal+term.move_xy(45,45),end='',flush=True)
    print(term.move_xy(0,2)+term.on_color_rgb(0,0,0)+'üîÆ  :      '+str(Players[1]['magic'])+term.normal+term.move_xy(45,45),end='',flush=True)
    print(term.move_xy(0,4)+term.on_color_rgb(0,0,0)+'üòá  :      '+str(len(Players[1]['ghostsLocationList']))+term.normal+term.move_xy(45,45),end='',flush=True)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #print  P2 Ressources
    print(term.move_xy(25+MapXY[0]*2+7,0)+term.on_color_rgb(0,0,0)+term.underline+term.white+'PLAYER TWO'+term.normal+term.move_xy(45,45),end='',flush=True)
    print(term.move_xy(25+MapXY[0]*2+21,2)+term.on_color_rgb(0,0,0)+':  üíâ'+term.move_xy(25+MapXY[0]*2+10,2)+str(Players[2]['magic'])+term.normal+term.move_xy(45,45),end='',flush=True)
    print(term.move_xy(25+MapXY[0]*2+22,0)+term.on_color_rgb(0,0,0)+'üßõüíÄ'+term.normal+term.move_xy(45,45),end='',flush=True)
    print(term.move_xy(25+MapXY[0]*2+21,4)+term.on_color_rgb(0,0,0)+':  üëª'+term.move_xy(25+MapXY[0]*2+10,4)+str(len(Players[2]['ghostsLocationList']))+term.normal+term.move_xy(45,45),end='',flush=True)

#UpdateGhostsPannelforP1andP2
# to add :JUMP TO COLUMN B ONCE YOU HAVE NO LINES IN COLUMN A
def updateGhostsPannel(Players,MapXY):
  for player in [1,2]:
      if player == 1 :
        startprint = 0
      else:
        startprint = 27+MapXY[0]*2
      for ghost in range(len(Players[player]['ghostsLocationList'])):
        print(term.move_xy(startprint,ghost+7)+term.white3+'‚Ä¢'+str(Players[player]['ghostsLocationList'][ghost][0])+'-'+str(Players[player]['ghostsLocationList'][ghost][1])+':'+str(Players[player]['ghosts'][Players[player]['ghostsLocationList'][ghost]])+'%'+term.normal+term.move_xy(190,190),end='',flush=True)


#check if cuur location and futur location or target is Adjacent
def IsItAdjacent(currtuple,futuple):


    if (futuple[0] == (currtuple[0] + 1)) and ((futuple[1] ==currtuple[1]) or (futuple[1] ==(currtuple[1] +1)) or (futuple[1] == (currtuple[1] -1))):
        return True
    elif (futuple[0] == (currtuple[0]-1)) and ((futuple[1]==currtuple[1]) or (futuple[1] ==(currtuple[1] +1)) or (futuple[1] == (currtuple[1] -1))):
        return True
    elif (futuple[0] == currtuple[0]) and ((futuple[1] == (currtuple[1] +1)) or (futuple[1] == (currtuple[1] -1))):
        return True
    else:
        return False

def isCaseFree(Players,futuple):
   free=True
   allghostsLocation= Players[1]["ghostsLocationList"] + Players[2]["ghostsLocationList"]
   allPlayersPopLocation= Players[1]["ghostPopLocation"] + Players[2]["ghostPopLocation"]   
   if futuple in allghostsLocation or futuple in allPlayersPopLocation:
      free = False
   return free
   

def moveGhost(Players,PlayerID,currtuple,futuple):
   if currtuple in Players[PlayerID]["ghostsLocationList"] and isCaseFree(Players,futuple) == True and IsItAdjacent(currtuple,futuple) == True:
    holdHealth=Players[PlayerID]["ghosts"][currtuple]
    del Players[PlayerID]["ghosts"][currtuple]
    Players[PlayerID]["ghosts"][futuple]=holdHealth
    for i in range(len(Players[PlayerID]["ghostsLocationList"])):
       if Players[PlayerID]["ghostsLocationList"][i] == currtuple:
          k=i
    del Players[PlayerID]["ghostsLocationList"][k]
    Players[PlayerID]["ghostsLocationList"].append(futuple)
    moveVisual(Players,PlayerID,currtuple,futuple)
       
   return Players
   

#Take orders from players and stock them in a list
def getOrderslist(MapXY):
    orderslistP1P2=[]
    for player in [1,2]:
      if player == 1 :
        print(term.normal+term.move_xy(0,MapXY[1]+5)+"Player " + str(player) + " Insert your orders : \n"+term.move_xy(0,MapXY[1]+6)+term.clear_eol+term.red3,end='',flush=True)
        orders=input()
      else:
        print(term.normal+term.move_xy(27+MapXY[1]*2,MapXY[1]+5)+"Player " + str(player) + " Insert your orders : \n"+term.normal+term.move_xy(27+MapXY[1]*2,MapXY[1]+6)+term.clear_eol+term.blue3,end='',flush=True)
        orders=input()
      print(term.normal)
      orderslistP1P2.append(orders.split())    
    return orderslistP1P2

def Invokeghost (Players,PlayerID):
    if Players[PlayerID]["magic"] >= 300 and (not(Players[PlayerID]["ghostPopLocation"] in Players[PlayerID]["ghostsLocationList"])):
        Players[PlayerID]["magic"] -= 300
        Players[PlayerID]["ghostsLocationList"].append((Players[PlayerID]["ghostPopLocation"][0],Players[PlayerID]["ghostPopLocation"][1]))
        Players[PlayerID]["ghosts"][(Players[PlayerID]["ghostPopLocation"][0],Players[PlayerID]["ghostPopLocation"][1])] = 100
        if PlayerID == 1:
          print(term.move_xy(25+Players[PlayerID]['ghostPopLocation'][0]*2,Players[PlayerID]['ghostPopLocation'][1])+term.on_blue+'üòá'+term.normal+term.move_xy(50,50),end ='',flush=True)
        else:
          print(term.move_xy(25+Players[PlayerID]['ghostPopLocation'][0]*2,Players[PlayerID]['ghostPopLocation'][1])+term.on_blue+'üë∫'+term.normal+term.move_xy(50,50),end ='',flush=True)
    return Players

def updateMagicDisplay(Players,MapXY):
   print(term.move_xy(11,2)+term.on_black+"     "+term.move_xy(11,2)+str(Players[1]['magic'])+term.move_xy(70,70),end='',flush=True)
   print(term.move_xy(25+MapXY[0]*2+10,2)+term.on_black+"     "+term.move_xy(25+MapXY[0]*2+10,2)+str(Players[2]['magic'])+term.move_xy(70,70),end='',flush=True)

def updateGhostsNumberDisplay(Players,MapXY):
   print(term.move_xy(11,4)+str(len(Players[1]['ghostsLocationList']))+term.normal+term.move_xy(70,70),end='',flush=True)
   print(term.move_xy(25+MapXY[0]*2+10,4)+str(len(Players[2]['ghostsLocationList']))+term.normal+term.move_xy(70,70),end='',flush=True)
              
#2- HEAL ghost with chosen amount and reduce twice the amount from magic
def Healghost(Players,PlayerID,targetGhost,amount,ghostjobdone):
    if targetGhost in Players[PlayerID]["ghostsLocationList"] and Players[PlayerID]["magic"] >= (amount*2) and (Players[PlayerID]["ghosts"][targetGhost] + amount <= 100) and (targetGhost not in ghostjobdone) :
       Players[PlayerID]["ghosts"][targetGhost] += amount
       Players[PlayerID]["magic"] -= (amount*2)
       ghostjobdone.append(targetGhost)
    return Players


def transformOrder (splitted):
    firsthalflist=splitted[0].split("-")
    firstTuple=(int(firsthalflist[0]),int(firsthalflist[1]))
    lol = splitted[1][0+1:]
    secondHalfList=lol.split("-")
    secondTuple=(int(secondHalfList[0]),int(secondHalfList[1]))
    fulltuple= [firstTuple,secondTuple]
    return fulltuple 

def grantMagic(Players,PlayerID,from_to,MagicList,MagicDict):
   if from_to in MagicList:
      Players[PlayerID]["magic"] += MagicDict[from_to]
      del MagicDict[from_to]
      deletefromMagiclist(from_to,MagicList)


def deletefromMagiclist(case,MagicList):
   for i in [0,1]:
     iid=-1
     for k in range(len(MagicList)):
        if MagicList[k] == case:
           iid=k
     if iid != -1 :
       del MagicList[iid]
def deletefromghostlist(case,Players):
   for i in [0,1]:
     iid=-1
     for k in range(len(Players[i+1]["ghostsLocationList"])):
        if Players[i+1]["ghostsLocationList"][k] == case:
           iid=k
     if iid != -1 :
       del Players[i+1]["ghostsLocationList"][iid]
        


def transformOrderForGathering(splitted):
    firsthalflist=splitted[0].split("-")
    firstTuple=(int(firsthalflist[0]),int(firsthalflist[1]))
    
    return firstTuple


def transformOrderForHeals (splitted):
    firsthalflist=splitted[0].split("-")
    firstTuple=(int(firsthalflist[0]),int(firsthalflist[1]))
    lol = splitted[1][0+1:]
    secondHalfList=lol.split("-")
    AmountTuple=(int(secondHalfList[0]))
    fulltuple= [firstTuple,AmountTuple]
    return fulltuple 

def cleanshit(list):
  newlist=[[],[]]
  for i in [0,1]:
    if "ghost" in list[i] :
     newlist[i].append("ghost")  
    for order in list[i]:
        if ":+" in order:
          halfSplit=order.split(":+")
          if len(halfSplit)== 2 and  halfSplit[1].isdigit():
             if "-" in halfSplit[0]:
                testXY=halfSplit[0].split("-")
                if len(testXY) == 2 and testXY[0].isdigit() and testXY[1].isdigit():
                   newlist[i].append(str(order))
        elif ":$" in order:
          halfSplit=order.split(":$")
          if len(halfSplit) == 2 and halfSplit[0] != "" and halfSplit[1] == "":
             if "-" in halfSplit[0]:
                testXY=halfSplit[0].split("-")
                if len(testXY) == 2 and testXY[0].isdigit() and testXY[1].isdigit():
                  newlist[i].append(str(order))
        elif ":@" in order:
           halfSplit=order.split(":@")
           if len(halfSplit) == 2 and halfSplit[0]!="" and halfSplit[1]!="":
             if "-" in halfSplit[0] and "-" in halfSplit[1] :
                testXY1=halfSplit[0].split("-")
                testXY2=halfSplit[1].split("-")
                if len(testXY1) == 2 and testXY1[0].isdigit() and testXY1[1].isdigit() and len(testXY2) == 2 and testXY2[0].isdigit() and testXY2[1].isdigit():
                  newlist[i].append(str(order))
        
        elif ":x" in order:
           halfSplit=order.split(":x")
           if len(halfSplit) == 2 and halfSplit[0]!="" and halfSplit[1]!="":
             if "-" in halfSplit[0] and "-" in halfSplit[1] :
                testXY1=halfSplit[0].split("-")
                testXY2=halfSplit[1].split("-")
                if len(testXY1) == 2 and testXY1[0].isdigit() and testXY1[1].isdigit() and len(testXY2) == 2 and testXY2[0].isdigit() and testXY2[1].isdigit():
                  newlist[i].append(str(order))
           
  return newlist
   
def updateemoji(Players):
   for i in [0,1]:  
     for case in Players[i+1]["ghostsLocationList"]:
        print(term.move_xy(25+case[0]*2,case[1])+term.on_blue+returnCorrectGhostEmoji(i,case,Players[i+1]["ghosts"][case])+term.normal+term.move_xy(50,50),end ='',flush=True)
   
def moveVisual(Players,PlayerID,currtuple,futuple):
   if (currtuple[0]+currtuple[1])%2 ==0 :
     print(term.move_xy(25+currtuple[0]*2,currtuple[1])+term.on_red3+'  '+term.normal+term.move_xy(50,50),end ='',flush=True)
   else:
     print(term.move_xy(25+currtuple[0]*2,currtuple[1])+term.on_yellow3+'  '+term.normal+term.move_xy(50,50),end ='',flush=True)
  
   print(term.move_xy(25+futuple[0]*2,futuple[1])+term.on_blue+returnCorrectGhostEmoji(PlayerID-1,futuple,Players[PlayerID]["ghosts"][futuple])+term.normal+term.move_xy(50,50),end ='',flush=True)

   return  None


def reEstablishCase(Players,MapXY,case,MagicDict):
   if (case[0]+case[1])%2 == 0 :
       print(term.move_xy(25+case[0]*2,case[1])+term.on_white+'  '+term.normal+term.move_xy(50,50),end='',flush=True)
   else:
       print(term.move_xy(25+case[0]*2,case[1])+term.on_red3+'  '+term.normal+term.move_xy(50,50),end='',flush=True)
   
   



def Phase1(Correctorrders,Players,MapXY,ghostsdone):
     for i in [0,1]:
       if 'ghost' in Correctorrders[i]:
         Invokeghost(Players,i+1)
         updateMagicDisplay(Players,MapXY)
         updateGhostsNumberDisplay(Players,MapXY)
         updateGhostsPannel(Players,MapXY)
         del Correctorrders[i][0]

def Phase2(Correctorrders,Players,MapXY,ghostsdone):
     for i in [0,1]:
      for order in Correctorrders[i]:
        splitted=order.split(':')
        if splitted[1][0] == "+" :
          from_to=transformOrderForHeals(splitted)
          thisghost = from_to[0]
          amount=from_to[1]
          Healghost(Players,i+1,thisghost,amount,ghostsdone) 
          updateMagicDisplay(Players,MapXY)
          updateGhostsPannel(Players,MapXY)
          updateemoji(Players)



      
def Phase3(Correctorrders,Players,MapXY,MagicList,MagicDict,ghostsdone):
     for i in [0,1]:
      for order in Correctorrders[i]:
        splitted=order.split(':')
        if splitted[1][0] == "$" :
          from_to=transformOrderForGathering(splitted)
          grantMagic(Players,i+1,from_to,MagicList,MagicDict)  
          updateMagicDisplay(Players,MapXY)


def Phase4(Correctorrders,Players,MapXY,ghostsdone,MagicDict):
     P1P2attackOrders=[]
     for i in [0,1]:
      for order in Correctorrders[i]:
        splitted=order.split(':')
        if splitted[1][0] == "x" :
          from_to=transformOrder(splitted)
          fromhere = from_to[0]
          tohere=from_to[1]
          if IsItAdjacent(fromhere,tohere)== True and (tohere in Players[1]["ghostsLocationList"] or tohere  in Players[2]["ghostsLocationList"]):
             Players[i+1]["magic"] += 10
             updateMagicDisplay(Players,MapXY)
             P1P2attackOrders.append(tohere)
      

        for i in [0,1]:
          for case in P1P2attackOrders:
            if case in Players[i+1]["ghostsLocationList"]:
               Players[i+1]["ghosts"][case] -= 10
               if Players[i+1]["ghosts"][case] <= 0:
                 updateGhostsPannel(Players,MapXY)
                 deletefromghostlist(case,Players)
                 reEstablishCase(Players,MapXY,case,MagicDict)
                 del Players[i+1]["ghosts"][case]
            updateMagicDisplay(Players,MapXY)
            updateGhostsPannel(Players,MapXY)
            updateGhostsNumberDisplay(Players,MapXY)
     
def Phase5(Correctorrders,Players,MapXY,ghostsdone):
     for i in [0,1]:
      for order in Correctorrders[i]:
        splitted=order.split(':')
        if splitted[1][0] == "@" :
          from_to=transformOrder(splitted)
          fromhere = from_to[0]
          tohere=from_to[1]
          moveGhost(Players,i+1,fromhere,tohere)
          updateGhostsNumberDisplay(Players,MapXY)
          updateGhostsPannel(Players,MapXY)
            
def Phase6(Players,MapXY):
     for i in [1,2]:
        Players[i]["magic"] = Players[i]["magic"] + 10
     updateMagicDisplay(Players,MapXY)
      
def playgame():
  print(term.home+term.clear)
  game_over=False
#Initialise Players dictionary
  Players = {
    1 : {
        "ghostPopLocation": () , 
        "ghosts": {},
        "ghostsLocationList": [],
        "magic": 500,
        "score" : 0,
    },
    2 : {
        "ghostPopLocation": () ,
        "ghosts": {},
        "ghostsLocationList": [],
        "magic": 500,
        "score" : 0
    }
  }

#Initialise  Maplist
  MapXY=initialiseMapXY()  
#Initialise MagicDict and Magiclist
  MagicDict = getMagicDict()
  MagicList=getMagicList()
  setInitialGhostsAndPopSpot(Players,getLines())
  printBoards(MapXY,MagicList,MagicDict,Players)
  updateGhostsPannel(Players,MapXY)
  while game_over == False:
    tourcounter=+ 1
    ghostsdone=[]
    Initorders = getOrderslist(MapXY)
    Correctorrders = cleanshit(Initorders)
    print(term.move_xy(20,27)+term.clear_eol+str(Correctorrders),end='',flush=True)
     #GHOST BUYING PHASE
    Phase1(Correctorrders,Players,MapXY,ghostsdone)
    #GHOST HEALING PHASE
    Phase2(Correctorrders,Players,MapXY,ghostsdone)
    #GHOST GATHERING PHASE
    Phase3(Correctorrders,Players,MapXY,MagicList,MagicDict,ghostsdone)
    #GHOST ATTACK PHASE
    Phase4(Correctorrders,Players,MapXY,ghostsdone,MagicDict)
    #CHECK IF ANY PLAYER HAS 0 GHOSTS
    if (len(Players[1]["ghostsLocationList"])) == 0 or (len(Players[2]["ghostsLocationList"])) == 0 :
      game_over = True
    #GHOST MOVEMENT PHASE
    Phase5(Correctorrders,Players,MapXY,ghostsdone)
    #POINT REGENERATION
    Phase6(Players,MapXY)
    
    

#-------------------------------------------------------------------------------------------------------------------

    



    
      
playgame()
